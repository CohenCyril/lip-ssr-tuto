---
fullname: lip-ssr-tuto
shortname: lip-ssr-tuto
organization: CohenCyril
community: false
action: false
coqdoc: false

synopsis: >-
  A tutorial for LIP members

description: |-
  A tutorial for LIP members

authors:
- name: Cyril Cohen
  initial: true

maintainers:
- name: Cyril Cohen
  nickname: CohenCyril

opam-file-maintainer: Cyril Cohen <cyril.cohen@inria.fr>

opam-file-version: dev

license:
  fullname: GNU Lesser General Public License v2.1
  identifier: LGPL-2.1-or-later
  file: LICENSE

supported_coq_versions:
  text: "8.18 to 8.20"
  opam: '{>= "8.18" & < "8.21"}'

tested_coq_opam_versions:
- version: '8.18'
- version: '8.19'
- version: '8.20'

dependencies:
- opam:
    name: coq-mathcomp-character
    version: '{= "2.2.0"}'
  description: Mathematical components version 2.2.0
- opam:
    name: coq-mathcomp-algebra-tactics
    version: '{= "1.2.3"}'
  description: Mathematical components algebra tactics 1.2.3
- opam:
    name: coq-mathcomp-zify
    version: '{= "1.5.0"}'
  description: Mathematical components zify plugin 1.5.0
- opam:
    name: coq-mathcomp-analysis
    version: '{= "1.5.0"}'
  description: Mathematical components analysis library 1.5.0

namespace: LipSsrTuto

keywords:
- name: tutorial
- name: ssreflect
- name: mathcomp

categories:
- name: Computer Science
- name: Miscellaneous/Coq Extensions

build: |-
  ## Building and installation instructions

  Unfortunately the Coq platform has not been release for 1 year
  :confused:, so we have to rely on either of the following four options.

  In all cases but the last you need to clone this repo and cd into it.

  ### Using opam
  After having installed opam and configured it for Coq [cf official
  doc](https://coq.inria.fr/opam-using.html), run:
  ```bash
  opam install --deps-only .
  make
  ```
  You can now run your favorite editor, you may need to install your
  favorite language server (i.e. `opam install coq-lsp` or
  `opam install vscoq-language-server`)

  ### Using nix
  After [installing nix](https://nixos.org/download/) and
  [cachix](https://docs.cachix.org/installation), run once:
  ```bash
  cachix use coq
  cachix use coq-community
  cachix use math-comp
  cachix use cohencyril
  ```
  
  Then, every time you want to use it you need to run (may take a few
  minutes the first time)
  ```bash
  nix-shell
  make
  ```
  You can now run your favorite editor, you **do not need** to install your
  favorite language server (they are included in the shell)

  ### Using docker (warning, the image is > 17GB)

  You need to [install docker](https://docs.docker.com/engine/install/).

  Then start vscode with the
  [`devcontainer`](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
  extension, then click on "reopen in container" (or `F1` and type the latter).

  ### Using codespaces (limited in time)

  Go to the repo and start a codespace ([Shortcut
  here](https://github.com/codespaces/new?ref=main&repo=876092766))


documentation: |-
  ## Documentation

  Follow the lectures in order.

---
